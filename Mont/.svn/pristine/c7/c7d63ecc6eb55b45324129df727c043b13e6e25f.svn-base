import java.math.BigInteger;

public class MontgomerySinT60 {
	
	public BigInteger montCompact(BigInteger X, BigInteger Y, BigInteger M, int numBits, int k, BigInteger Mprima) {

		BigInteger A = new BigInteger("0");
		BigInteger B = new BigInteger("2").pow(k);
		BigInteger qi = new BigInteger("0");
		BigInteger c;
		
		int index = 0;
		int n = numBits/k;
		 
		for (int i = 0; i < n ; i++) {
			c = new BigInteger("0");			
			for (int j = 0; j < n; j++) {
				BigInteger sj = BIUtil.getD(A, j, k).add(BIUtil.getD(X, j, k).multiply(BIUtil.getD(Y, i, k)));
				if (j == 0) 
					qi = BIUtil.getD( sj.multiply(Mprima), 0 , k ); // k-LSB
				
				BigInteger rj = qi.multiply(BIUtil.getD(M, j, k));				
				
				BigInteger t6j = sj.add(rj.add(c));	// {c+1,t6j} = sj + rj + cj			
				c = t6j.shiftRight(k);	
				
				if(j > 0)
					A = BIUtil.setD(A, j-1 , k, t6j);
				
				System.out.println("A -> " + A.toString(16));
			}			
			A = BIUtil.setD(A, n - 1, k, c);
			
			System.out.println("End iteration A -> " + A.toString(16));
		}
		return A;
	}

	public static void main(String[] args) {
		BigInteger M = new BigInteger("6e79434fd91645c886aa3169c908791865815db7fb2104ac291c321351c14fbaf746f25c920bfca40c808b0c4cbfbf8f6c2fd11a2abfda32b0d8758135775a552e70620f92648e4707d5c4bcbe77c01a8f9bbe410dc168338cb4cb1d457aeee35e144098393aa78a8776e06bb7152560eab8ce7e4a985b41c8695a64f3805605",16);
		BigInteger A = new BigInteger("29df4a5222a76d0c2a046902131ea045d32593bf6ab39c0090a8872bd4f623f5f40bd541bfe1d5b2a66fa0a40d2632f299937e8e1942ba2673b3e0c459bc250b9316ccbf2f571c7407bf7dbfe5922740399974950d839f6ab072ce177f8ce2946bd9387c37a9f402ede9d00a81e5efe4b860ddc20034fa611660c205c209bb0f",16);
		BigInteger B = new BigInteger("18e75f311ce8a8459d7c39b2298c0f7a3bccfa6142ac740cbe9b6d95d4732066dfe9f62997e0954034503d7ea784fa332d5dc8fd555e3de4fe4bfe44f7daebc03eded23c5b911a29e89bcabc093a3ae0a1aa3ecddc08e55d558c845bff1f01503fc1f56a3a18ea38352d38f857a51cd8b321322ffd533f639b02a6014aa6f5ef",16);

		MontgomerySinT60 alg5 = new MontgomerySinT60();
		int k = 16;
		BigInteger Mprima = MontgomeryUtil.calcularMprima(M, k); // new BigInteger("f933", 16); // -- k = 16

		System.out.println("Resultado -> "	+ alg5.montCompact(A, B, M, 1024, k, Mprima).toString(16));
		System.out.println("A -> " + A.toString(16));
		System.out.println("B -> " + B.toString(16));
		System.out.println("M -> " + M.toString(16));
		System.out.println("Mprima -> " + Mprima.toString(16));		
	}
}
